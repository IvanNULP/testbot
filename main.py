import os
import random
from aiohttp import web
from telegram import Update, Message
from telegram.ext import (
    ApplicationBuilder,
    MessageHandler,
    CommandHandler,
    ContextTypes,
    filters,
)
from openai import OpenAI

BOT_TOKEN = os.getenv("BOT_TOKEN")
AUTHORIZED_USER_ID = 384210176
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

client = OpenAI(api_key=OPENAI_API_KEY)

MODES = {
    "polit_anal": "–î–∏–≤–∞–Ω–Ω–∏–π –ø–æ–ª—ñ—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ—Ç–∏–∫, –≤—Å—ñ –π–æ–º—É –≤—Å–µ –≤–∏–Ω–Ω—ñ, –Ω–∞—Ä–∞—Ç–∏–≤–∏ —Ä–æ—Å—ñ–π—Å—å–∫–æ–≥–æ —Ç–µ–ª–µ–±–∞—á–µ–Ω–Ω—è.",
    "superexpert": "–†–∞–Ω–¥–æ–º–Ω–∏–π –µ–∫—Å–ø–µ—Ä—Ç –∑ –ø–æ–ª—ñ—Ç–∏—á–Ω–∏—Ö, –∫—É–ª—å—Ç—É—Ä–Ω–∏—Ö, —Å–ø–æ—Ä—Ç–∏–≤–Ω–∏—Ö, –∫–æ—Å–º—ñ—á–Ω–∏—Ö —ñ —ñ–Ω—à–∏—Ö —Å—Ñ–µ—Ä - —Å—É–ø–µ—Ä-—Ç—Ä–æ–ª—å.",
    "zrada": "–ó—Ä–∞–¥–æ-–ø–∞—Ç—Ä—ñ–æ—Ç —ñ–∑ —á–æ—Ä–Ω–∏–º –≥—É–º–æ—Ä–æ–º.",
    "zel_bot": "–ë–æ—Ç –ó–µ–ª–µ–Ω—Å—å–∫–æ–≥–æ, –Ω–µ–Ω–∞–≤–∏–¥–∏—Ç—å –ü–æ—Ä–æ—à–µ–Ω–∫–∞, –æ–±–æ–∂–Ω—î —Å–ª—É–≥—É –Ω–∞—Ä–æ–¥—É, —É –≤—Å—å–æ–º—É –≤–∏–Ω–Ω—ñ –ø–æ–ø–µ—Ä–µ–¥–Ω–∏–∫–∏.",
    "balashov": "–°–≤—ñ–¥–æ–∫ –ë–∞–ª–∞—à–æ–≤–∞, –ø–∞—Ä—Ç—ñ—è '5.10', –ø–æ–ø—É–ª—ñ–∑–º –ø–æ–¥–∞—Ç–∫–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏",
    "vorchun": "–í–æ—Ä—á—É–Ω-–±—É—Ä—á—É–Ω.",
    "poder": "–õ–µ—Å—å –ü–æ–¥–µ—Ä–≤ º—è–Ω—Å—å–∫–∏–π-—Å—Ç–∞–π–ª: –ø–∞—Ñ–æ—Å, –º–∞—Ç—é–∫–∏, —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞ —Å–∞—Ç–∏—Ä–∞, –≥—Ä–æ—Ç–µ—Å–∫ —ñ —Ç–µ–∞—Ç—Ä.",
    "visionary": "–Ø—Å–Ω–æ–≤–∏–¥–µ—Ü—å –∑ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª—É ‚Äî –ø–µ—Ä–µ–¥–±–∞—á–µ–Ω–Ω—è –∑ –º—ñ—Å—Ç–∏—á–Ω–∏–º, –∫—É–º–µ–¥–Ω–∏–º —ñ –∞–±—Å—É—Ä–¥–Ω–∏–º –ø—ñ–¥—Ç–µ–∫—Å—Ç–æ–º.",
    "kum": "–ö—É–º –∑ —Å–µ–ª–∞, –∑ —Ñ–æ–ª—å–∫–ª–æ—Ä–Ω–∏–º –≥—É–º–æ—Ä–æ–º —ñ –ø—Ä–∏–º—ñ—Ç–∏–≤–Ω–æ—é –ª–æ–≥—ñ–∫–æ—é.",
    "rashn_tv": "–ü—Ä–æ–ø–∞–≥–∞–Ω–¥–∏—Å—Ç —Ä–∞—à–Ω —Ç–± ‚Äî –±—Ä–µ—Ö–Ω—è, –ø–∞—Ñ–æ—Å, –≤–∏–∫—Ä–∏–≤–ª–µ–Ω–Ω—è —Ñ–∞–∫—Ç—ñ–≤, –≥–µ—Ä–æ—ó–∑–∞—Ü—ñ—è –º–æ—Å–∫–∞–ª—ñ–≤."
}

EMOJIS = {
    "polit_anal": "üìà",
    "superexpert": "üß†",
    "zrada": "üá∫üá¶",
    "zel_bot": "ü§ñ",
    "balashov": "üí∏",
    "vorchun": "üßì",
    "poder": "üé≠",
    "visionary": "üîÆ",
    "kum": "üßÖ",
    "rashn_tv": "üì∫"
}

CURRENT_MODE = {"mode": "auto"}
LAST_REPLIES = {}
MENTION_LOG = set()


async def set_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != AUTHORIZED_USER_ID:
        return
    if not context.args:
        await update.message.reply_text("–î–æ—Å—Ç—É–ø–Ω—ñ —Ä–µ–∂–∏–º–∏: " + ", ".join(MODES.keys()) + ", auto")
        return
    mode = context.args[0].strip().lower()
    if mode in MODES or mode == "auto":
        CURRENT_MODE["mode"] = mode
        await update.message.reply_text("–†–µ–∂–∏–º –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: " + mode)
    else:
        await update.message.reply_text("–ù–µ–≤—ñ–¥–æ–º–∏–π —Ä–µ–∂–∏–º.")


async def determine_best_mode(user_text: str, history: str, replied_text: str) -> str:
    if random.random() < 0.2:
        return "poder"

    mode_prompt = (
        "–¢–∏ –≤–∏–±–∏—Ä–∞—î—à —Å—Ç–∏–ª—å —Ç—Ä–æ–ª—ñ–Ω–≥—É –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–∏–≤–∞–Ω–Ω–æ–≥–æ –µ–∫—Å–ø–µ—Ä—Ç–∞. "
        "–û–±–µ—Ä–∏ –æ–¥–∏–Ω —ñ–∑: polit_anal, superexpert, zrada, zel_bot, balashov, vorchun, poder, rashn_tv. "
        "–í—Ä–∞—Ö–æ–≤—É–π –∑–º—ñ—Å—Ç, –µ–º–æ—Ü—ñ—ó, –ø–∞—Ñ–æ—Å, GIF–∏, –µ–º–æ–¥–∑—ñ. "
        "–ö–æ–Ω—Ç–µ–∫—Å—Ç: " + history + "\n"
        "–Ø–∫—â–æ —Ü–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —ñ–Ω—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: " + replied_text + "\n"
        "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–ø–∏—Å–∞–≤: " + user_text
    )

    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": mode_prompt}],
        temperature=0.7,
        max_tokens=10,
    )
    mode = response.choices[0].message.content.strip().lower()
    return mode if mode in MODES else "poder"


async def generate_reply(user_text: str, selected_mode: str, replied_text: str, history: str, is_target_user: bool, chat_id: int) -> str:
    if not is_target_user:
        for name in ["–ó—ñ–¥–∞–Ω", "–ó—ñ–¥–∞–Ω–≥–∞", "–ó—ñ–¥–∞–Ω—É—Å", "–ó—ñ–¥–∞—É–Ω", "–ú–∏—Ö–∞–π–ª–æ", "–ú—ñ—Å—å–∫–æ", "–ú–∏—Ö—É—ó–ª", "–ú—ñ—à–∞"]:
            user_text = user_text.replace(name, "")

    attempts = 3
    for _ in range(attempts):
        prompt = (
            f"–¢–∏ ‚Äî {MODES[selected_mode]}. "
            "–¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî —Ç—Ä–æ–ª–ª—ñ–Ω–≥-–≤—ñ–¥–ø–æ–≤—ñ–¥—å. "
            "–ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Å–ª–æ–≤–æ —Å–∞–º–æ–∑–∞–∫–æ—Ö–∞–Ω–∏–π —ñ –≤—Å–µ–∑–Ω–∞–π–∫–æ. –ü–µ—Ä–µ–≤—ñ—Ä—è–π —Ç–µ–∫—Å—Ç –Ω–∞ –≥—Ä–∞–º–º–∞—Ç–∏—á–Ω—ñ —ñ —Å—Ç–∏–ª—ñ—Å—Ç–∏—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏. "
            "–ü–µ—Ä–µ—Å–≤—ñ–¥—á–∏—Å—å, —â–æ —Ç–µ–∫—Å—Ç –ª–æ–≥—ñ—á–Ω–∏–π —ñ –º–∞—î –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è. "
            "–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —è–∫ –∫–æ–Ω—Ç—Ä–∞—Ä–≥—É–º–µ–Ω—Ç. –ú–æ–∂–µ—à –±—É—Ç–∏ —ñ—Ä–æ–Ω—ñ—á–Ω–∏–º, —Ü–∏–Ω—ñ—á–Ω–∏–º, —Å–∞—Ç–∏—Ä–∏—á–Ω–∏–º, —Ñ–∞–Ω—Ç–∞–∑—ñ–π–Ω–∏–º. "
            "–Ü–Ω–∫–æ–ª–∏ –ø—Ä–æ–≤–æ–∫—É–π. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –º–∞—Ç—é–∫–∏, –∞–ª–µ –Ω–µ –±–µ–∑ –ø—Ä–∏—á–∏–Ω–∏. –ú–∞–∫—Å–∏–º—É–º ‚Äî 3 —Ä–µ—á–µ–Ω–Ω—è. "
            "–Ø–∫—â–æ –Ω–µ –∑–Ω–∞—î—à —â–æ —Å–∫–∞–∑–∞—Ç–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏ '–π–¥–∏ –Ω–∞—Ö—É–π'. "
            f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {history}\n"
            f"–ü–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {replied_text}\n"
            f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {user_text}"
        )

        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.95,
            max_tokens=150,
        )
        reply = response.choices[0].message.content.strip()
        if LAST_REPLIES.get(chat_id) != reply:
            LAST_REPLIES[chat_id] = reply
            return reply

    return "–¢–∞ —Ç–∏ –≤–∂–µ —Å–∞–º —Å–µ–±–µ –ø–µ—Ä–µ–≥—Ä—É–∑–∏–≤. –ü–µ—Ä–µ—Ñ—Ä–∞–∑—É–π –Ω–æ—Ä–º–∞–ª—å–Ω–æ üòâ"


async def handle_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message: Message = update.message
    if not message:
        return

    is_authorized = update.effective_user.id == AUTHORIZED_USER_ID
    is_reply_to_bot = (
        message.reply_to_message and
        message.reply_to_message.from_user and
        message.reply_to_message.from_user.is_bot
    )

    if not is_authorized and not is_reply_to_bot:
        return

    user_text = message.text or message.caption or "(–ú–µ–¥—ñ–∞ –∞–±–æ —Å—Ç—ñ–∫–µ—Ä)"
    replied_text = ""
    if message.reply_to_message:
        replied_text = message.reply_to_message.text or message.reply_to_message.caption or "(–ú–µ–¥—ñ–∞)"

    # –Ü–≥–Ω–æ—Ä—É–≤–∞—Ç–∏ –∑–≤–µ—Ä—Ç–∞–Ω–Ω—è –¥–æ –±–æ—Ç–∞ –≤—ñ–¥ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö
    bot_name = (await context.bot.get_me()).first_name.lower()
    if bot_name in user_text.lower() and not is_authorized:
        full_name = update.effective_user.full_name
        MENTION_LOG.add(full_name)
        print(f"üîî –ó–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –±–æ—Ç–∞ –≤—ñ–¥: {full_name}")
        return

    history = context.chat_data.get("last", "")
    context.chat_data["last"] = user_text

    try:
        if CURRENT_MODE["mode"] == "auto":
            selected_mode = await determine_best_mode(user_text, history, replied_text)
        else:
            selected_mode = CURRENT_MODE["mode"]
        is_target_user = update.effective_user.id == AUTHORIZED_USER_ID
        reply = await generate_reply(user_text, selected_mode, replied_text, history, is_target_user, update.effective_chat.id)
    except Exception as e:
        import traceback
        traceback.print_exc()
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")
        reply = "–¢–∞ —Ç–∏ –≤–∂–µ —Å–∞–º —Å–µ–±–µ –ø–µ—Ä–µ–≥—Ä—É–∑–∏–≤. –ü–µ—Ä–µ—Ñ—Ä–∞–∑—É–π –Ω–æ—Ä–º–∞–ª—å–Ω–æ üòâ"
        selected_mode = "poder"

    await message.reply_text(f"{reply} {EMOJIS.get(selected_mode, 'üé≠')}", reply_to_message_id=message.message_id)


application = ApplicationBuilder().token(BOT_TOKEN).build()
application.add_handler(CommandHandler("mode", set_mode))
application.add_handler(MessageHandler(filters.ALL, handle_all))

app = web.Application()

async def on_startup(app: web.Application):
    await application.initialize()
    webhook_url = os.getenv("RENDER_EXTERNAL_URL") + "/webhook"
    await application.bot.set_webhook(webhook_url)
    print("üì° Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: " + webhook_url)
    app["application"] = application

async def handle_webhook(request: web.Request):
    data = await request.json()
    update = Update.de_json(data, application.bot)
    await application.process_update(update)
    return web.Response()

app.router.add_post("/webhook", handle_webhook)
app.on_startup.append(on_startup)

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É", port)
    web.run_app(app, host="0.0.0.0", port=port)
