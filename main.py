import os
import random
from aiohttp import web
from telegram import Update, Message
from telegram.ext import (
    ApplicationBuilder,
    MessageHandler,
    CommandHandler,
    ContextTypes,
    filters,
)
from openai import OpenAI

BOT_TOKEN = os.getenv("BOT_TOKEN")
AUTHORIZED_USER_ID = 412991871
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

client = OpenAI(api_key=OPENAI_API_KEY)

MODES = {
    "rostv": "–ü—Ä–æ–ø–∞–≥–∞–Ω–¥–∏—Å—Ç –∑ —Ä–æ—Å–¢–ë.",
    "deputat": "–°–∞–º–æ–∑–∞–∫–æ—Ö–∞–Ω–∏–π –¥–µ–ø—É—Ç–∞—Ç –æ–±–ª—Ä–∞–¥–∏.",
    "batya_fb": "–ë–∞—Ç—è –∑ Facebook, '–≤—Å–µ —Ä–∞–Ω—ñ—à–µ –±—É–ª–æ –∫—Ä–∞—â–µ'.",
    "futboll": "–§—É—Ç–±–æ–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ç–æ—Ä —ñ–∑ –¥–∏–≤–∞–Ω—É.",
    "polit_anal": "–ü–æ–ª—ñ—Ç–∏—á–Ω–∏–π –¥–∏–≤–∞–Ω–Ω–∏–π –µ–∫—Å–ø–µ—Ä—Ç.",
    "superexpert": "–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –µ–∫—Å–ø–µ—Ä—Ç –∑ —É—Å—å–æ–≥–æ.",
    "zrada": "–ó—Ä–∞–¥–æ-–ø–∞—Ç—Ä—ñ–æ—Ç —ñ–∑ —á–æ—Ä–Ω–∏–º –≥—É–º–æ—Ä–æ–º.",
    "ukr_politdivan": "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –ø–æ–ª—ñ—Ç–∏—á–Ω–∏–π –¥–∏–≤–∞–Ω–Ω–∏–π –º–∞—Ä–∞—Ñ–æ–Ω–µ—Ü—å.",
    "random": "–í–∏–ø–∞–¥–∫–æ–≤–∏–π —Å—Ç–∏–ª—å –∑ —É—Å—ñ—Ö –¥–æ—Å—Ç—É–ø–Ω–∏—Ö."
}

CURRENT_MODE = {"mode": "rostv"}

async def set_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != AUTHORIZED_USER_ID:
        return
    if not context.args or context.args[0] not in MODES:
        await update.message.reply_text(f"–î–æ—Å—Ç—É–ø–Ω—ñ —Ä–µ–∂–∏–º–∏: {', '.join(MODES.keys())}")
        return
    CURRENT_MODE["mode"] = context.args[0]
    await update.message.reply_text(f"–†–µ–∂–∏–º –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {context.args[0]}")

def get_mode_description(mode: str):
    if mode == "random":
        mode = random.choice([m for m in MODES if m != "random"])
    return MODES.get(mode, MODES["rostv"])

async def generate_reply(text: str, mode: str) -> str:
    character_prompt = get_mode_description(mode)
    prompt = f"""
–¢–∏ —Ç—Ä–æ–ª–ª—è—á–∏–π AI. –°—Ç–∏–ª—å ‚Äî —á–æ—Ä–Ω–∏–π –≥—É–º–æ—Ä, –ø–æ–ª—ñ—Ç–∏—á–Ω–∞ —Å–∞—Ç–∏—Ä–∞, —Å–∞—Ä–∫–∞–∑–º. –û–±—Ä–∞–∑: {character_prompt}

–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:
"{text}"

–ù–∞–¥–∞–π —Ç—Ä–æ–ª–ª—è—á—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É —Å—Ç–∏–ª—ñ (1-2 —Ä–µ—á–µ–Ω–Ω—è).
"""
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.98,
        max_tokens=120,
    )
    return response.choices[0].message.content.strip()

async def handle_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message: Message = update.message
    if not message or update.effective_user.id != AUTHORIZED_USER_ID:
        return

    user_text = ""
    if message.text:
        user_text = message.text
    elif message.caption:
        user_text = f"(–ú–µ–¥—ñ–∞ –∑ –ø—ñ–¥–ø–∏—Å–æ–º): {message.caption}"
    elif message.sticker:
        user_text = "(–ù–∞–¥—ñ—Å–ª–∞–Ω–æ —Å—Ç—ñ–∫–µ—Ä)"
    elif message.animation:
        user_text = "(–ù–∞–¥—ñ—Å–ª–∞–Ω–æ GIF)"
    elif message.video:
        user_text = "(–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –≤—ñ–¥–µ–æ)"
    elif message.photo:
        user_text = "(–ù–∞–¥—ñ—Å–ª–∞–Ω–æ —Ñ–æ—Ç–æ)"
    else:
        user_text = "(–ù–µ–≤—ñ–¥–æ–º–µ –º–µ–¥—ñ–∞)"

    if message.reply_to_message and message.reply_to_message.text:
        replied = message.reply_to_message.text
        user_text = f"–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —á—É–∂–∏–π —Ç–µ–∫—Å—Ç: "{replied}"
–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–ø–∏—Å–∞–≤: {user_text}"

    try:
        reply = await generate_reply(user_text, CURRENT_MODE["mode"])
    except Exception:
        reply = "–í–∏–±–∞—á, —è –∑–∞–≤–∏—Å –≤—ñ–¥ —Ç–≤–æ—î—ó —É–Ω—ñ–∫–∞–ª—å–Ω–æ—ó –ø–æ–¥–∞—á—ñ –º–µ–¥—ñ–∞."

    await message.reply_text(reply)

application = ApplicationBuilder().token(BOT_TOKEN).build()
application.add_handler(CommandHandler("mode", set_mode))
application.add_handler(MessageHandler(filters.ALL, handle_all))

app = web.Application()

async def on_startup(app: web.Application):
    await application.initialize()
    webhook_url = os.getenv("RENDER_EXTERNAL_URL") + "/webhook"
    await application.bot.set_webhook(webhook_url)
    print(f"üì° Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {webhook_url}")
    app["application"] = application

async def handle_webhook(request: web.Request):
    data = await request.json()
    print("üîî –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ /webhook:")
    update = Update.de_json(data, application.bot)
    await application.process_update(update)
    return web.Response()

app.router.add_post("/webhook", handle_webhook)
app.on_startup.append(on_startup)

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    web.run_app(app, host="0.0.0.0", port=port)
