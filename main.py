import os
import random
from aiohttp import web
from telegram import Update, Message
from telegram.ext import (
    ApplicationBuilder,
    MessageHandler,
    CommandHandler,
    ContextTypes,
    filters,
)
from openai import OpenAI

BOT_TOKEN = os.getenv("BOT_TOKEN")
AUTHORIZED_USER_ID = 412991871
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

client = OpenAI(api_key=OPENAI_API_KEY)

MODES = {
    "rostv": "–ü—Ä–æ–ø–∞–≥–∞–Ω–¥–∏—Å—Ç –∑ —Ä–æ—Å–¢–ë.",
    "deputat": "–î–µ–ø—É—Ç–∞—Ç –∑ –ø–∞—Ñ–æ—Å–æ–º —ñ –±–∑–¥—É—Ä–æ–º.",
    "batya_fb": "–ë–∞—Ç—è, —â–æ —Å–∫—É—á–∏–≤ –∑–∞ –°–†–°–†.",
    "futboll": "–§—É—Ç–±–æ–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ç–æ—Ä –∑ –¥–∏–≤–∞–Ω—É.",
    "polit_anal": "–î–∏–≤–∞–Ω–Ω–∏–π –ø–æ–ª—ñ—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ—Ç–∏–∫.",
    "superexpert": "–í—Å–µ –∑–Ω–∞—î, –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–∑—É–º—ñ—î.",
    "zrada": "–ó—Ä–∞–¥–æ-–ø–∞—Ç—Ä—ñ–æ—Ç —ñ–∑ —á–æ—Ä–Ω–∏–º –≥—É–º–æ—Ä–æ–º.",
    "ukr_politdivan": "–ú–∞—Ä–∞—Ñ–æ–Ω—â–∏–∫-–∫–æ–º–µ–Ω—Ç–∞—Ç–æ—Ä —ñ–∑ –¢–ë.",
    "random": "–†–µ–∂–∏–º –≤–∏–±–∏—Ä–∞—î—Ç—å—Å—è –≤–∏–ø–∞–¥–∫–æ–≤–æ.",
}

CURRENT_MODE = {"mode": "rostv"}

async def set_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != AUTHORIZED_USER_ID:
        return
    if not context.args or context.args[0] not in MODES:
        await update.message.reply_text("–î–æ—Å—Ç—É–ø–Ω—ñ —Ä–µ–∂–∏–º–∏: " + ", ".join(MODES.keys()))
        return
    CURRENT_MODE["mode"] = context.args[0]
    await update.message.reply_text("–†–µ–∂–∏–º —Ç—Ä–æ–ª—ñ–Ω–≥—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: " + context.args[0])

def get_mode_description(mode: str):
    if mode == "random":
        mode = random.choice([m for m in MODES if m != "random"])
    return MODES.get(mode, MODES["rostv"])

async def generate_reply(user_text: str, mode: str, replied_text: str = "", history: str = "") -> str:
    character_prompt = get_mode_description(mode)
    prompt = (
        "–¢–∏ ‚Äî —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π —Ç—Ä–æ–ª—å –∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º. –¢–∏ –∑–≤–µ—Ä—Ç–∞—î—à—Å—è –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–∏–∫–ª—é—á–Ω–æ –Ω–∞ "—Ç–∏". "
        "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –Ω–µ –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏, –∞ –æ–ø–æ–Ω—É–≤–∞—Ç–∏: –∂–æ—Ä—Å—Ç–∫–æ, –¥–æ—Ç–µ–ø–Ω–æ, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ, –∑ –µ–º–æ—Ü—ñ–π–Ω–∏–º –ø—ñ–¥–∫–æ–ª–æ–º. "
        "–¢–∏ –º–∞—î—à –∑–∞—á–µ–ø–∏—Ç–∏—Å—è –∑–∞ –π–æ–≥–æ —Ñ—Ä–∞–∑—É –π –∑—Ä–æ–±–∏—Ç–∏ –∫–æ–Ω—Ç—Ä–∫–æ–º–µ–Ω—Ç–∞—Ä. "
        "–ù–µ –∑–∞–≥–ª–∞–¥–∂—É–π, –Ω–µ —É–∑–∞–≥–∞–ª—å–Ω—é–π, –Ω–µ —É–Ω–∏–∫–∞–π –æ—Å–æ–±–∏—Å—Ç–æ–≥–æ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è. "
        "–†–µ–∞–≥—É–π —Ç–æ—á–Ω–æ –Ω–∞ —Å—É—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –Ω—ñ–±–∏ —Ç–∏ –π–æ–≥–æ –æ–ø–æ–Ω–µ–Ω—Ç –≤ —Ä–æ–∑–º–æ–≤—ñ, —è–∫–∏–π –∑–∞–≤–∂–¥–∏ –º–∞—î –æ—Å—Ç–∞–Ω–Ω—î —Å–ª–æ–≤–æ.

"
        f"–û–±—Ä–∞–Ω–∏–π —Å—Ç–∏–ª—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {character_prompt}

"
        f"–ö–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç—É (–º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º):
{history}

"
        f"–Ø–∫—â–æ —Ü–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —ñ–Ω—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –æ—Å—å –≤–æ–Ω–æ:
{replied_text}

"
        f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–ø–∏—Å–∞–≤:
{user_text}

"
        "–°—Ñ–æ—Ä–º—É–ª—é–π –∫–æ—Ä–æ—Ç–∫—É, –∫–æ–ª—é—á—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å (1-2 —Ä–µ—á–µ–Ω–Ω—è), –æ–±–æ–≤'—è–∑–∫–æ–≤–æ —É —Ñ–æ—Ä–º—ñ –ø—Ä—è–º–æ–≥–æ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞ "—Ç–∏". "
        "–ù–µ –¥–∞–≤–∞–π –∑–∞–≥–∞–ª—å–Ω–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π. –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≥—Ä—É–±–∏—Ç—å ‚Äî –ø—Ä–∏—à–∏–π —â–µ –∂–æ—Ä—Å—Ç–∫—ñ—à–µ, –∞–ª–µ –±–µ–∑ –º–∞—Ç—é–∫—ñ–≤."
    )
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.99,
        max_tokens=140,
    )
    return response.choices[0].message.content.strip()

async def handle_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message: Message = update.message
    if not message or update.effective_user.id != AUTHORIZED_USER_ID:
        return

    user_text = ""
    if message.text:
        user_text = message.text
    elif message.caption:
        user_text = "(–ú–µ–¥—ñ–∞ –∑ –ø—ñ–¥–ø–∏—Å–æ–º): " + message.caption
    elif message.sticker:
        user_text = "(–ù–∞–¥—ñ—Å–ª–∞–Ω–æ —Å—Ç—ñ–∫–µ—Ä)"
    elif message.animation:
        user_text = "(–ù–∞–¥—ñ—Å–ª–∞–Ω–æ GIF)"
    elif message.video:
        user_text = "(–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –≤—ñ–¥–µ–æ)"
    elif message.photo:
        user_text = "(–ù–∞–¥—ñ—Å–ª–∞–Ω–æ —Ñ–æ—Ç–æ)"
    else:
        user_text = "(–ù–µ–≤—ñ–¥–æ–º–µ –º–µ–¥—ñ–∞)"

    replied_text = ""
    if message.reply_to_message:
        if message.reply_to_message.text:
            replied_text = message.reply_to_message.text
        elif message.reply_to_message.caption:
            replied_text = "(–ü—ñ–¥–ø–∏—Å –¥–æ –º–µ–¥—ñ–∞): " + message.reply_to_message.caption
        elif message.reply_to_message.sticker:
            replied_text = "(–°—Ç—ñ–∫–µ—Ä)"
        elif message.reply_to_message.photo:
            replied_text = "(–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è)"
        elif message.reply_to_message.video:
            replied_text = "(–í—ñ–¥–µ–æ)"

    history = context.chat_data.get("last", "")
    context.chat_data["last"] = user_text

    try:
        reply = await generate_reply(user_text, CURRENT_MODE["mode"], replied_text, history)
    except Exception:
        reply = "–¢–∞ —Ç–∏ –≤–∂–µ —Å–∞–º —Å–µ–±–µ –ø–µ—Ä–µ–≥—Ä—É–∑–∏–≤. –ü–µ—Ä–µ—Ñ—Ä–∞–∑—É–π –Ω–æ—Ä–º–∞–ª—å–Ω–æ üòâ"

    await message.reply_text(reply)

application = ApplicationBuilder().token(BOT_TOKEN).build()
application.add_handler(CommandHandler("mode", set_mode))
application.add_handler(MessageHandler(filters.ALL, handle_all))

app = web.Application()

async def on_startup(app: web.Application):
    await application.initialize()
    webhook_url = os.getenv("RENDER_EXTERNAL_URL") + "/webhook"
    await application.bot.set_webhook(webhook_url)
    print("üì° Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: " + webhook_url)
    app["application"] = application

async def handle_webhook(request: web.Request):
    data = await request.json()
    print("üîî –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ /webhook:")
    update = Update.de_json(data, application.bot)
    await application.process_update(update)
    return web.Response()

app.router.add_post("/webhook", handle_webhook)
app.on_startup.append(on_startup)

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É", port)
    web.run_app(app, host="0.0.0.0", port=port)
