import os
import random
from collections import deque
from telegram import Update, Message
from telegram.ext import (
    ApplicationBuilder,
    MessageHandler,
    CommandHandler,
    ContextTypes,
    filters,
)
from openai import OpenAI
from aiohttp import web

# === CONFIG ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
AUTHORIZED_USER_ID = 384210176
RENDER_EXTERNAL_URL = os.getenv("RENDER_EXTERNAL_URL")

client = OpenAI(api_key=OPENAI_API_KEY)
CHAT_HISTORY = dict()
MAX_HISTORY = 20

MODES = {
    "polit_anal": "–î–∏–≤–∞–Ω–Ω–∏–π –ø–æ–ª—ñ—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ—Ç–∏–∫...",
    "superexpert": "–†–∞–Ω–¥–æ–º–Ω–∏–π –µ–∫—Å–ø–µ—Ä—Ç –∑ —É—Å—ñ—Ö —Å—Ñ–µ—Ä...",
    "zrada": "–ó—Ä–∞–¥–æ-–ø–∞—Ç—Ä—ñ–æ—Ç —ñ–∑ —á–æ—Ä–Ω–∏–º –≥—É–º–æ—Ä–æ–º.",
    "zel_bot": "–ë–æ—Ç –ó–µ–ª–µ–Ω—Å—å–∫–æ–≥–æ...",
    "balashov": "–°–≤—ñ–¥–æ–∫ –ë–∞–ª–∞—à–æ–≤–∞...",
    "vorchun": "–í–æ—Ä—á—É–Ω-–±—É—Ä—á—É–Ω.",
    "poder": "–õ–µ—Å—å –ü–æ–¥–µ—Ä–≤ º—è–Ω—Å—å–∫–∏–π-—Å—Ç–∞–π–ª...",
    "visionary": "–Ø—Å–Ω–æ–≤–∏–¥–µ—Ü—å –∑ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª—É...",
    "kum": "–ö—É–º –∑ —Å–µ–ª–∞...",
    "rashn_tv": "–ü—Ä–æ–ø–∞–≥–∞–Ω–¥–∏—Å—Ç —ñ–∑ —Ä–∞—à–Ω —Ç–±..."
}

EMOJIS = {
    "polit_anal": "üìä",
    "superexpert": "üß†",
    "zrada": "üá∫üá¶",
    "zel_bot": "ü§ñ",
    "balashov": "üí∏",
    "vorchun": "üßì",
    "poder": "üé≠",
    "visionary": "üîÆ",
    "kum": "üßÖ",
    "rashn_tv": "üì∫"
}

CURRENT_MODE = {"mode": "auto"}

def is_sentence_complete(text: str) -> bool:
    return text.strip().endswith(('.', '!', '?'))

# === –ö–æ–º–∞–Ω–¥–∞ /mode ===
async def set_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    mode = CURRENT_MODE["mode"]
    await update.message.reply_text(f"üîß –ü–æ—Ç–æ—á–Ω–∏–π —Ä–µ–∂–∏–º: {mode}")

# === –û—Å–Ω–æ–≤–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ ===
async def handle_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat_id = update.effective_chat.id
    message = update.message

    # ‚ùó –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –ª–∏—à–µ —è–∫—â–æ:
    # 1. –¶–µ —Ç–∞—Ä–≥–µ—Ç–æ–≤–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
    # 2. –ê–ë–û —Ü–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–æ—Ç–∞
    if (
        user_id != AUTHORIZED_USER_ID and
        not (message.reply_to_message and message.reply_to_message.from_user and message.reply_to_message.from_user.is_bot)
    ):
        return  # –Ü–≥–Ω–æ—Ä—É—î–º–æ —ñ–Ω—à—ñ –≤–∏–ø–∞–¥–∫–∏

    replied_text = message.reply_to_message.text if message.reply_to_message else None

    if chat_id not in CHAT_HISTORY:
        CHAT_HISTORY[chat_id] = deque(maxlen=MAX_HISTORY)
    CHAT_HISTORY[chat_id].append(message)

    history_text = "\n".join([m.text for m in CHAT_HISTORY[chat_id] if m.text])
    is_continuation = replied_text is None or replied_text in history_text

    try:
        # === –í–∏–±—ñ—Ä —Ä–µ–∂–∏–º—É GPT ===
        if user_id != AUTHORIZED_USER_ID:
            combined_text = f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {history_text if is_continuation else ''}\n–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message.text}"
            mode_selection = client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {
                        "role": "system",
                        "content": (
                            "–¢–∏ ‚Äî –∞–Ω–∞–ª—ñ—Ç–∏–∫. –ù–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –≤–∏–±–µ—Ä–∏ –æ–¥–∏–Ω —ñ–∑ –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂—ñ–≤:\n\n"
                            + ", ".join(MODES.keys()) +
                            "\n\n–ü–æ–≤–µ—Ä–Ω–∏ –ª–∏—à–µ –∫–ª—é—á, –±–µ–∑ –∑–∞–π–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤."
                        )
                    },
                    {"role": "user", "content": combined_text}
                ],
                temperature=0.3,
                max_tokens=10
            )
            mode = mode_selection.choices[0].message.content.strip()
            if mode != "poder" and random.random() < 0.2:
                mode = "poder"
        else:
            mode = None  # –°–ø–µ—Ü —Ä–µ–∂–∏–º –¥–ª—è —Ç–∞—Ä–≥–µ—Ç–æ–≤–∞–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

        # === –ü–æ–±—É–¥–æ–≤–∞ –ø—Ä–æ–º–ø—Ç–∞ GPT ===
        if user_id == AUTHORIZED_USER_ID:
            prompt = (
                "–¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî —Ç—Ä–æ–ª–ª—ñ–Ω–≥-–≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–∏–≤–∞–Ω–Ω–æ–º—É –µ–∫—Å–ø–µ—Ä—Ç—É. "
                "–ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Å–ª–æ–≤–æ —Å–∞–º–æ–∑–∞–∫–æ—Ö–∞–Ω–∏–π —ñ –≤—Å–µ–∑–Ω–∞–π–∫–æ. "
                "–ó–∞–≤–∂–¥–∏ –ø–µ—Ä–µ–≤—ñ—Ä—è–π –ª–æ–≥—ñ–∫—É, –≥—Ä–∞–º–∞—Ç–∏–∫—É, —ñ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Å–∞—Ç–∏—Ä—É, —ñ—Ä–æ–Ω—ñ—é, –∂–∞—Ä—Ç–∏, –º–∞—Ç—é–∫–∏. "
                f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {history_text if is_continuation else ''}\n"
                f"–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞: {replied_text or '‚Äî'}\n"
                f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message.text}"
            )
        else:
            prompt = (
                f"–¢–∏ ‚Äî {MODES[mode]}. "
                "–¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äî —Ç—Ä–æ–ª–ª—ñ–Ω–≥-–≤—ñ–¥–ø–æ–≤—ñ–¥—å. "
                "–ú–∞–∫—Å–∏–º—É–º 3 —Ä–µ—á–µ–Ω–Ω—è. –ú–æ–∂–Ω–∞ –º–∞—Ç—é–∫–∏. "
                "–ù–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π '—Å–∞–º–æ–∑–∞–∫–æ—Ö–∞–Ω–∏–π' —ñ '–≤—Å–µ–∑–Ω–∞–π–∫–æ'. "
                f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {history_text if is_continuation else ''}\n"
                f"–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞: {replied_text or '‚Äî'}\n"
                f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {message.text}"
            )

        # === –í—ñ–¥–ø–æ–≤—ñ–¥—å GPT ===
        response = client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "system", "content": prompt}],
            temperature=0.8,
            max_tokens=150
        )

        reply = response.choices[0].message.content.strip()
        if not is_sentence_complete(reply):
            reply += "."

        emoji = EMOJIS.get(mode, "")
        await message.reply_text(f"{reply} {emoji}")

    except Exception as e:
        await message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞: " + str(e))

# === Webhook –∑–∞–ø—É—Å–∫ ===
application = ApplicationBuilder().token(BOT_TOKEN).build()
application.add_handler(CommandHandler("mode", set_mode))
application.add_handler(MessageHandler(filters.ALL, handle_all))

app = web.Application()

async def on_startup(app: web.Application):
    await application.initialize()
    webhook_url = RENDER_EXTERNAL_URL.rstrip("/") + "/webhook"
    await application.bot.set_webhook(webhook_url)
    print("üì° Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:", webhook_url)
    app["application"] = application

async def handle_webhook(request: web.Request):
    data = await request.json()
    update = Update.de_json(data, application.bot)
    await application.process_update(update)
    return web.Response()

app.router.add_post("/webhook", handle_webhook)
app.on_startup.append(on_startup)

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    print(f"üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    web.run_app(app, host="0.0.0.0", port=port)
