import os
import random
from aiohttp import web
from telegram import Update, Message
from telegram.ext import (
    ApplicationBuilder,
    MessageHandler,
    CommandHandler,
    ContextTypes,
    filters,
)
from openai import OpenAI

BOT_TOKEN = os.getenv("BOT_TOKEN")
AUTHORIZED_USER_ID = 412991871
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

client = OpenAI(api_key=OPENAI_API_KEY)

MODES = {
    "deputat": "–î–µ–ø—É—Ç–∞—Ç –∑ –ø–∞—Ñ–æ—Å–æ–º —ñ –±–∑–¥—É—Ä–æ–º.",    "futboll": "–§—É—Ç–±–æ–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ç–æ—Ä –∑ –¥–∏–≤–∞–Ω—É.",
    "polit_anal": "–î–∏–≤–∞–Ω–Ω–∏–π –ø–æ–ª—ñ—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ—Ç–∏–∫.",
    "superexpert": "–í—Å–µ –∑–Ω–∞—î, –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–∑—É–º—ñ—î.",
    "zrada": "–ó—Ä–∞–¥–æ-–ø–∞—Ç—Ä—ñ–æ—Ç —ñ–∑ —á–æ—Ä–Ω–∏–º –≥—É–º–æ—Ä–æ–º.",    "zel_bot": "–ë–æ—Ç –ó–µ–ª–µ–Ω—Å—å–∫–æ–≥–æ.",
    "balashov": "–°–≤—ñ–¥–æ–∫ –ë–∞–ª–∞—à–æ–≤–∞.",
    "vorchun": "–í–æ—Ä—á—É–Ω-–±—É—Ä—á—É–Ω.",
    "poder": "–õ–µ—Å—å –ü–æ–¥–µ—Ä–≤ º—è–Ω—Å—å–∫–∏–π-—Å—Ç–∞–π–ª: –ø–∞—Ñ–æ—Å, –º–∞—Ç—é–∫–∏, —ñ–Ω—Ç–µ–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞ —Å–∞—Ç–∏—Ä–∞, –≥—Ä–æ—Ç–µ—Å–∫ —ñ —Ç–µ–∞—Ç—Ä."
}

EMOJIS = {
    "deputat": "üèõ",    "futboll": "‚öΩÔ∏è",
    "polit_anal": "üìä",
    "superexpert": "üß†",
    "zrada": "üá∫üá¶",    "zel_bot": "ü§ñ",
    "balashov": "üí∏",
    "vorchun": "üßì",
    "poder": "üé≠"
}


CURRENT_MODE = {"mode": "auto"}

async def set_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != AUTHORIZED_USER_ID:
        return
    if not context.args:
        await update.message.reply_text("–î–æ—Å—Ç—É–ø–Ω—ñ —Ä–µ–∂–∏–º–∏: " + ", ".join(MODES.keys()) + ", auto")
        return
    mode = context.args[0].strip().lower()
    if mode in MODES or mode == "auto":
        CURRENT_MODE["mode"] = mode
        await update.message.reply_text("–†–µ–∂–∏–º –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: " + mode)
    else:
        await update.message.reply_text("–ù–µ–≤—ñ–¥–æ–º–∏–π —Ä–µ–∂–∏–º.")

async def determine_best_mode(user_text: str) -> str:
    mode_prompt = f"""
–ù–∞ –æ—Å–Ω–æ–≤—ñ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–±–µ—Ä–∏, —è–∫–∏–π —Å—Ç–∏–ª—å —Ç—Ä–æ–ª—ñ–Ω–≥—É –∫—Ä–∞—â–µ –ø—ñ–¥—ñ–π–¥–µ. 
–û–±–µ—Ä—ñ—Ç—å –ª–∏—à–µ –æ–¥–∏–Ω —ñ–∑ —Ç–∞–∫–∏—Ö –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤: deputat, futboll, polit_anal, superexpert, zrada, divan_expert, zel_bot, balashov, vorchun, poder\n\n"
        f"–ö–æ–Ω—Ç–µ–∫—Å—Ç —á–∞—Ç—É (–º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º):\n{history}\n\n"
        f"–Ø–∫—â–æ —Ü–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —ñ–Ω—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –æ—Å—å –≤–æ–Ω–æ:\n{replied_text}\n\n"
        f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–ø–∏—Å–∞–≤:\n{user_text}\n\n"
        "–°—Ñ–æ—Ä–º—É–ª—é–π –∫–æ—Ä–æ—Ç–∫—É, –∫–æ–ª—é—á—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å (1-2 —Ä–µ—á–µ–Ω–Ω—è), —É —Ñ–æ—Ä–º—ñ –ø—Ä—è–º–æ–≥–æ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞ '—Ç–∏'."
    )
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.95,
        max_tokens=140,
    )
    return response.choices[0].message.content.strip()

async def handle_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message: Message = update.message
    if not message or update.effective_user.id != AUTHORIZED_USER_ID:
        return

    user_text = message.text or message.caption or "(–ú–µ–¥—ñ–∞ –∞–±–æ —Å—Ç—ñ–∫–µ—Ä)"
    replied_text = ""
    if message.reply_to_message:
        replied_text = message.reply_to_message.text or message.reply_to_message.caption or "(–ú–µ–¥—ñ–∞)"

    history = context.chat_data.get("last", "")
    context.chat_data["last"] = user_text

    try:
        if CURRENT_MODE["mode"] == "auto":
            selected_mode = await determine_best_mode(user_text)
        else:
            selected_mode = CURRENT_MODE["mode"]
        reply = await generate_reply(user_text, selected_mode, replied_text, history)
    except Exception:
        reply = "–¢–∞ —Ç–∏ –≤–∂–µ —Å–∞–º —Å–µ–±–µ –ø–µ—Ä–µ–≥—Ä—É–∑–∏–≤. –ü–µ—Ä–µ—Ñ—Ä–∞–∑—É–π –Ω–æ—Ä–º–∞–ª—å–Ω–æ üòâ"

    await message.reply_text(f"{reply} {EMOJIS.get(selected_mode, 'üé≠')}")

application = ApplicationBuilder().token(BOT_TOKEN).build()
application.add_handler(CommandHandler("mode", set_mode))
application.add_handler(MessageHandler(filters.ALL, handle_all))

app = web.Application()

async def on_startup(app: web.Application):
    await application.initialize()
    webhook_url = os.getenv("RENDER_EXTERNAL_URL") + "/webhook"
    await application.bot.set_webhook(webhook_url)
    print("üì° Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: " + webhook_url)
    app["application"] = application

async def handle_webhook(request: web.Request):
    data = await request.json()
    print("üîî –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ /webhook:")
    update = Update.de_json(data, application.bot)
    await application.process_update(update)
    return web.Response()

app.router.add_post("/webhook", handle_webhook)
app.on_startup.append(on_startup)

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É", port)
    web.run_app(app, host="0.0.0.0", port=port)
