import os
import random
from aiohttp import web
from telegram import Update, Message
from telegram.ext import (
    ApplicationBuilder,
    MessageHandler,
    CommandHandler,
    ContextTypes,
    filters,
)
from openai import OpenAI

BOT_TOKEN = os.getenv("BOT_TOKEN")
AUTHORIZED_USER_ID = 412991871
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

client = OpenAI(api_key=OPENAI_API_KEY)

MODES = {
    "rostv": "–ü—Ä–æ–ø–∞–≥–∞–Ω–¥–∏—Å—Ç —Ä–æ—Å—ñ–π—Å—å–∫–∏—Ö –∫–∞–Ω–∞–ª—ñ–≤: –∞–≥—Ä–µ—Å–∏–≤–Ω–∏–π, –µ–º–æ—Ü—ñ–π–Ω–∏–π, –ø–µ—Ä–µ–∫—Ä—É—á–µ–Ω–∏–π —Å—Ç–∏–ª—å.",
    "deputat": "–î–µ–ø—É—Ç–∞—Ç –æ–±–ª–∞—Å–Ω–æ—ó —Ä–∞–¥–∏: –≥–æ–≤–æ—Ä–∏—Ç—å –ø–∞—Ñ–æ—Å–Ω–æ, –∑ —Ä–µ–≥–ª–∞–º–µ–Ω—Ç–∞–º–∏, –∞–ª–µ –±–µ–∑ —Å–µ–Ω—Å—É.",
    "batya_fb": "–ë–∞—Ç—å–∫–æ –∑ Facebook: —Å—É–º—É—î –∑–∞ –º–∏–Ω—É–ª–∏–º, –¥–∞—î –ø–æ—Ä–∞–¥–∏, –º–∞—î –∫–∞—Ç–µ–≥–æ—Ä–∏—á–Ω—É –¥—É–º–∫—É.",
    "futboll": "–§—É—Ç–±–æ–ª—å–Ω–∏–π –∫–æ–º–µ–Ω—Ç–∞—Ç–æ—Ä –∑ –¥–∏–≤–∞–Ω—É: –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ –º–∞—Ç—á–∞–º–∏, —Å–∞—Ä–∫–∞–∑–º, —É–ø–µ—Ä–µ–¥–∂–µ–Ω—ñ—Å—Ç—å.",
    "polit_anal": "–î–∏–≤–∞–Ω–Ω–∏–π –ø–æ–ª—ñ—Ç–∏—á–Ω–∏–π –∞–Ω–∞–ª—ñ—Ç–∏–∫: –≤—Å–µ –∫—É–ø–ª–µ–Ω–æ, –≤—Å—é–¥–∏ –∑–º–æ–≤–∏, —É –≤–ª–∞–¥—ñ –≤–∏–Ω–Ω—ñ –≤—Å—ñ.",
    "superexpert": "–í—Å–µ–æ—Ö–æ–ø–Ω–∏–π –µ–∫—Å–ø–µ—Ä—Ç: –∫–æ–º–µ–Ω—Ç—É—î –≤—Å–µ ‚Äî –≤—ñ–¥ —Ñ—ñ–∑–∏–∫–∏ –¥–æ –∫–æ—Ç–ª–µ—Ç.",
    "zrada": "–ü–∞—Ç—Ä—ñ–æ—Ç–∏—á–Ω–∏–π –ø–µ—Å–∏–º—ñ—Å—Ç: –±–∞—á–∏—Ç—å –∑—Ä–∞–¥—É –≤ —É—Å—å–æ–º—É, —Å–∫–∏–≥–ª–∏—Ç—å, –∞–ª–µ —Ç—Ä–∏–º–∞—î —Ñ—Ä–æ–Ω—Ç —Å–∞—Ä–∫–∞–∑–º–æ–º.",
    "ukr_politdivan": "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –º–∞—Ä–∞—Ñ–æ–Ω-–∫–æ–º–µ–Ω—Ç–∞—Ç–æ—Ä: –∑–∞–≤–∂–¥–∏ '–≤ —Ç–µ–º—ñ', –º–∞—î —Å–∏–ª—å–Ω—ñ '–≤–ª–∞—Å–Ω—ñ –¥–∂–µ—Ä–µ–ª–∞'.",
    "random": "–ö–æ–∂–Ω–æ–≥–æ —Ä–∞–∑—É –≤–∏–ø–∞–¥–∫–æ–≤–æ –æ–±–∏—Ä–∞—î—Ç—å—Å—è —Å—Ç–∏–ª—å –∑ –Ω–∞—è–≤–Ω–∏—Ö –≤–∏—â–µ."
}

CURRENT_MODE = {"mode": "rostv"}

async def set_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != AUTHORIZED_USER_ID:
        return
    if not context.args or context.args[0] not in MODES:
        await update.message.reply_text("–î–æ—Å—Ç—É–ø–Ω—ñ —Ä–µ–∂–∏–º–∏: " + ", ".join(MODES.keys()))
        return
    CURRENT_MODE["mode"] = context.args[0]
    await update.message.reply_text("–†–µ–∂–∏–º –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: " + context.args[0])

def get_mode_description(mode: str):
    if mode == "random":
        mode = random.choice([m for m in MODES if m != "random"])
    return MODES.get(mode, MODES["rostv"])

async def generate_reply(text: str, mode: str) -> str:
    character_prompt = get_mode_description(mode)
    prompt = (
        "–£—è–≤–∏ —Å–µ–±–µ –∫—Ä–∏—Ç–∏—á–Ω–∏–º –∞–Ω–∞–ª—ñ—Ç–∏–∫–æ–º —ñ–∑ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–∏–º —Ä–æ–∑—É–º–æ–º. "
        "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–∫–æ–º–µ–Ω—Ç—É–≤–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É –≤–∏–≥–ª—è–¥—ñ –¥–æ—Ç–µ–ø–Ω–æ—ó, –∂–æ—Ä—Å—Ç–∫–æ—ó, "
        "—ñ—Ä–æ–Ω—ñ—á–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ, –∑ –Ω–∞—Ç—è–∫–∞–º–∏, –ø–µ—Ä–µ–±—ñ–ª—å—à–µ–Ω–Ω—è–º, –µ–º–æ—Ü—ñ–π–Ω–æ—é –Ω–∞—Å–º—ñ—à–∫–æ—é, –∞–ª–µ –±–µ–∑ –ø—Ä—è–º–∏—Ö –æ–±—Ä–∞–∑ —á–∏ –Ω–µ–Ω–∞–≤–∏—Å—Ç—ñ. "
        "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Å—Ç–∏–ª—å: " + character_prompt + "\n\n"
        "–û—Å—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: "" + text + ""\n"
        "–°—Ñ–æ—Ä–º—É–ª—é–π –∂–æ—Ä—Å—Ç–∫—É, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—É —Ä–µ–ø–ª—ñ–∫—É —É 1-2 —Ä–µ—á–µ–Ω–Ω—è—Ö."
    )
    response = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.99,
        max_tokens=120,
    )
    return response.choices[0].message.content.strip()

async def handle_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message: Message = update.message
    if not message or update.effective_user.id != AUTHORIZED_USER_ID:
        return

    user_text = ""
    if message.text:
        user_text = message.text
    elif message.caption:
        user_text = "(–ú–µ–¥—ñ–∞ –∑ –ø—ñ–¥–ø–∏—Å–æ–º): " + message.caption
    elif message.sticker:
        user_text = "(–ù–∞–¥—ñ—Å–ª–∞–Ω–æ —Å—Ç—ñ–∫–µ—Ä)"
    elif message.animation:
        user_text = "(–ù–∞–¥—ñ—Å–ª–∞–Ω–æ GIF)"
    elif message.video:
        user_text = "(–ù–∞–¥—ñ—Å–ª–∞–Ω–æ –≤—ñ–¥–µ–æ)"
    elif message.photo:
        user_text = "(–ù–∞–¥—ñ—Å–ª–∞–Ω–æ —Ñ–æ—Ç–æ)"
    else:
        user_text = "(–ù–µ–≤—ñ–¥–æ–º–µ –º–µ–¥—ñ–∞)"

    if message.reply_to_message and message.reply_to_message.text:
        replied = message.reply_to_message.text
        user_text = "–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —á—É–∂–∏–π —Ç–µ–∫—Å—Ç: "" + replied + ""\n–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–ø–∏—Å–∞–≤: " + user_text

    try:
        reply = await generate_reply(user_text, CURRENT_MODE["mode"])
    except Exception:
        reply = "–°—Ö–æ–∂–µ, –º–æ—î –ø–æ—á—É—Ç—Ç—è –≥—É–º–æ—Ä—É –∑–∞–≤–∏—Å–ª–æ. –ü–æ–≤—Ç–æ—Ä–∏ —â–µ —Ä–∞–∑."

    await message.reply_text(reply)

application = ApplicationBuilder().token(BOT_TOKEN).build()
application.add_handler(CommandHandler("mode", set_mode))
application.add_handler(MessageHandler(filters.ALL, handle_all))

app = web.Application()

async def on_startup(app: web.Application):
    await application.initialize()
    webhook_url = os.getenv("RENDER_EXTERNAL_URL") + "/webhook"
    await application.bot.set_webhook(webhook_url)
    print("üì° Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: " + webhook_url)
    app["application"] = application

async def handle_webhook(request: web.Request):
    data = await request.json()
    print("üîî –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ /webhook:")
    update = Update.de_json(data, application.bot)
    await application.process_update(update)
    return web.Response()

app.router.add_post("/webhook", handle_webhook)
app.on_startup.append(on_startup)

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 10000))
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É", port)
    web.run_app(app, host="0.0.0.0", port=port)
